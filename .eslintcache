[{"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/attributeExists.test.ts":"1","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/dataVariableExists.test.ts":"2","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getAttribute.test.ts":"3","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getDataVariableAsString.test.ts":"4","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/index.test.ts":"5","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/toString.test.ts":"6","/home/sm/clones/cheminfo/netcdfjs/src/data.ts":"7","/home/sm/clones/cheminfo/netcdfjs/src/header.ts":"8","/home/sm/clones/cheminfo/netcdfjs/src/index.ts":"9","/home/sm/clones/cheminfo/netcdfjs/src/toString.ts":"10","/home/sm/clones/cheminfo/netcdfjs/src/types.ts":"11","/home/sm/clones/cheminfo/netcdfjs/src/utils.ts":"12"},{"size":376,"mtime":1669145793003,"results":"13","hashOfConfig":"14"},{"size":389,"mtime":1669145778971,"results":"15","hashOfConfig":"14"},{"size":305,"mtime":1669145802655,"results":"16","hashOfConfig":"14"},{"size":353,"mtime":1669145810327,"results":"17","hashOfConfig":"14"},{"size":5688,"mtime":1669153141490,"results":"18","hashOfConfig":"14"},{"size":289,"mtime":1669157761077,"results":"19","hashOfConfig":"14"},{"size":1730,"mtime":1669155522660,"results":"20","hashOfConfig":"14"},{"size":8165,"mtime":1669157700548,"results":"21","hashOfConfig":"14"},{"size":4375,"mtime":1669157889716,"results":"22","hashOfConfig":"14"},{"size":962,"mtime":1669157712396,"results":"23","hashOfConfig":"14"},{"size":3352,"mtime":1669155070980,"results":"24","hashOfConfig":"14"},{"size":899,"mtime":1669154824751,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xxonn3",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/attributeExists.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/dataVariableExists.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getAttribute.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getDataVariableAsString.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/index.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/toString.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/data.ts",["64"],[],"import { IOBuffer } from 'iobuffer';\n\nimport { Header } from './header';\nimport { num2bytes, str2num, readType } from './types';\n// const STREAMING = 4294967295;\n\n/**\n * Read data for the given non-record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @return - Data of the element\n */\nexport function nonRecord(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n): ReturnType<typeof readType>[] {\n  // variable type\n  const type = str2num(variable.type);\n\n  // size of the data\n  const size = variable.size / num2bytes(type);\n\n  // iterates over the data\n  let data = new Array(size);\n  for (let i = 0; i < size; i++) {\n    data[i] = readType(buffer, type, 1);\n  }\n\n  return data;\n}\n\n/**\n * Read data for the given record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @param recordDimension - Record dimension metadata\n * @return - Data of the element\n */\nexport function record(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n  recordDimension: Header['recordDimension'],\n): ReturnType<typeof readType>[] {\n  // variable type\n  const type = str2num(variable.type);\n  const width = variable.size ? variable.size / num2bytes(type) : 1;\n\n  // size of the data\n  // TODO streaming data\n  const size = recordDimension.length;\n\n  // iterates over the data\n  let data = new Array(size);\n  const step = recordDimension.recordStep;\n  if (step) {\n    for (let i = 0; i < size; i++) {\n      let currentOffset = buffer.offset;\n      data[i] = readType(buffer, type, width);\n      buffer.seek(currentOffset + step);\n    }\n  } else {\n    throw new Error('recordDimension.recordStep is undefined');\n  }\n\n  return data;\n}\n","/home/sm/clones/cheminfo/netcdfjs/src/header.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/index.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/toString.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/types.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/utils.ts",["65"],[],"import { IOBuffer } from 'iobuffer';\n/**\n * Throws a non-valid NetCDF exception if the statement it's true\n * @ignore\n * @param statement - Throws if true\n * @param reason - Reason to throw\n */\nexport function notNetcdf(statement: boolean, reason: string) {\n  if (statement) {\n    throw new TypeError(`Not a valid NetCDF v3.x file: ${reason}`);\n  }\n}\n\n/**\n * Moves 1, 2, or 3 bytes to next 4-byte boundary\n * @param buffer - Buffer for the file data\n */\nexport function padding(buffer: IOBuffer) {\n  if (buffer.offset % 4 !== 0) {\n    buffer.skip(4 - (buffer.offset % 4));\n  }\n}\n\n/**\n * Reads the name\n * @param buffer - Buffer for the file data\n * @return Name\n */\nexport function readName(buffer: IOBuffer) {\n  // Read name\n  const nameLength = buffer.readUint32();\n  const name = buffer.readChars(nameLength);\n\n  // validate name\n  // TODO\n\n  // Apply padding\n  padding(buffer);\n  return name;\n}\n",{"ruleId":"66","severity":1,"message":"67","line":49,"column":3,"nodeType":"68","messageId":"69","endLine":49,"endColumn":25},{"ruleId":"66","severity":1,"message":"70","line":35,"column":3,"nodeType":"68","messageId":"69","endLine":35,"endColumn":10},"no-warning-comments","Unexpected 'todo' comment: 'TODO streaming data'.","Line","unexpectedComment","Unexpected 'todo' comment: 'TODO'."]