[{"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/attributeExists.test.ts":"1","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/dataVariableExists.test.ts":"2","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getAttribute.test.ts":"3","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getDataVariableAsString.test.ts":"4","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/index.test.ts":"5","/home/sm/clones/cheminfo/netcdfjs/src/__tests__/toString.test.ts":"6","/home/sm/clones/cheminfo/netcdfjs/src/data.ts":"7","/home/sm/clones/cheminfo/netcdfjs/src/header.ts":"8","/home/sm/clones/cheminfo/netcdfjs/src/index.ts":"9","/home/sm/clones/cheminfo/netcdfjs/src/toString.ts":"10","/home/sm/clones/cheminfo/netcdfjs/src/types.ts":"11","/home/sm/clones/cheminfo/netcdfjs/src/utils.ts":"12","/home/sm/clones/cheminfo/netcdfjs/src/parser.ts":"13"},{"size":377,"mtime":1669163706460,"results":"14","hashOfConfig":"15"},{"size":390,"mtime":1669163706460,"results":"16","hashOfConfig":"15"},{"size":306,"mtime":1669163706460,"results":"17","hashOfConfig":"15"},{"size":354,"mtime":1669163706460,"results":"18","hashOfConfig":"15"},{"size":5689,"mtime":1669163706460,"results":"19","hashOfConfig":"15"},{"size":290,"mtime":1669163706460,"results":"20","hashOfConfig":"15"},{"size":1730,"mtime":1669155522660,"results":"21","hashOfConfig":"15"},{"size":8179,"mtime":1669163914905,"results":"22","hashOfConfig":"15"},{"size":92,"mtime":1669164041120,"results":"23","hashOfConfig":"15"},{"size":969,"mtime":1669163482560,"results":"24","hashOfConfig":"15"},{"size":3352,"mtime":1669155070980,"results":"25","hashOfConfig":"15"},{"size":899,"mtime":1669154824751,"results":"26","hashOfConfig":"15"},{"size":4425,"mtime":1669164173720,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xxonn3",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/attributeExists.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/dataVariableExists.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getAttribute.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/getDataVariableAsString.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/index.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/__tests__/toString.test.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/data.ts",["69"],[],"import { IOBuffer } from 'iobuffer';\n\nimport { Header } from './header';\nimport { num2bytes, str2num, readType } from './types';\n// const STREAMING = 4294967295;\n\n/**\n * Read data for the given non-record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @return - Data of the element\n */\nexport function nonRecord(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n): ReturnType<typeof readType>[] {\n  // variable type\n  const type = str2num(variable.type);\n\n  // size of the data\n  const size = variable.size / num2bytes(type);\n\n  // iterates over the data\n  let data = new Array(size);\n  for (let i = 0; i < size; i++) {\n    data[i] = readType(buffer, type, 1);\n  }\n\n  return data;\n}\n\n/**\n * Read data for the given record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @param recordDimension - Record dimension metadata\n * @return - Data of the element\n */\nexport function record(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n  recordDimension: Header['recordDimension'],\n): ReturnType<typeof readType>[] {\n  // variable type\n  const type = str2num(variable.type);\n  const width = variable.size ? variable.size / num2bytes(type) : 1;\n\n  // size of the data\n  // TODO streaming data\n  const size = recordDimension.length;\n\n  // iterates over the data\n  let data = new Array(size);\n  const step = recordDimension.recordStep;\n  if (step) {\n    for (let i = 0; i < size; i++) {\n      let currentOffset = buffer.offset;\n      data[i] = readType(buffer, type, width);\n      buffer.seek(currentOffset + step);\n    }\n  } else {\n    throw new Error('recordDimension.recordStep is undefined');\n  }\n\n  return data;\n}\n","/home/sm/clones/cheminfo/netcdfjs/src/header.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/index.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/toString.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/types.ts",[],[],"/home/sm/clones/cheminfo/netcdfjs/src/utils.ts",["70"],[],"import { IOBuffer } from 'iobuffer';\n/**\n * Throws a non-valid NetCDF exception if the statement it's true\n * @ignore\n * @param statement - Throws if true\n * @param reason - Reason to throw\n */\nexport function notNetcdf(statement: boolean, reason: string) {\n  if (statement) {\n    throw new TypeError(`Not a valid NetCDF v3.x file: ${reason}`);\n  }\n}\n\n/**\n * Moves 1, 2, or 3 bytes to next 4-byte boundary\n * @param buffer - Buffer for the file data\n */\nexport function padding(buffer: IOBuffer) {\n  if (buffer.offset % 4 !== 0) {\n    buffer.skip(4 - (buffer.offset % 4));\n  }\n}\n\n/**\n * Reads the name\n * @param buffer - Buffer for the file data\n * @return Name\n */\nexport function readName(buffer: IOBuffer) {\n  // Read name\n  const nameLength = buffer.readUint32();\n  const name = buffer.readChars(nameLength);\n\n  // validate name\n  // TODO\n\n  // Apply padding\n  padding(buffer);\n  return name;\n}\n","/home/sm/clones/cheminfo/netcdfjs/src/parser.ts",[],[],{"ruleId":"71","severity":1,"message":"72","line":49,"column":3,"nodeType":"73","messageId":"74","endLine":49,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":35,"column":3,"nodeType":"73","messageId":"74","endLine":35,"endColumn":10},"no-warning-comments","Unexpected 'todo' comment: 'TODO streaming data'.","Line","unexpectedComment","Unexpected 'todo' comment: 'TODO'."]